<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">


	<bean id="customAccessDenied" class="com.miracle.fts.security.CustomAccessDeniedHandler"/>
	<bean id="customLoginSuccess" class="com.miracle.fts.security.CustomLoginSuccessHandler"/>
	<bean id="customLogoutSuccess" class="com.miracle.fts.security.CustomLogoutSuccessHandler"/>
	<!-- 
	<bean id="customPasswordEncoder" class="com.lec.sts18_security.security.CustomNoOpPasswordEncoder"/>
	 -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	
	
	<!-- 컨테이너의 HTTP security 요소 -->
	<security:http>
		<!-- 특정 url pattern 요청이 들어올때 인터셉터를 이용해 접근 제한 설정 -->
		<security:intercept-url pattern="/**" access="permitAll"/>
			
		
		<!-- /sample/member 요청은 ROLE_MEMBER 라는 권한이 있는 사용자 만이 접근 가능 -->
		<security:intercept-url pattern="/qna/**" access="hasAnyRole('ROLE_MEMBER, ROLE_CEO')"/>
		
		<!-- /sample/admin 요청은 ROLE_ADMIN 권한이 있는 사용자 만 접근 가능 -->
		<!-- <security:intercept-url pattern="/favorite" access="hasRole('ROLE_ADMIN')"/> -->
		
		<!-- <security:form-login/> --> <!-- 스프링 시큐리티에서 제공하는 기본 로그인 페이지 -->
		<security:form-login login-page="/login"
			authentication-success-handler-ref="customLoginSuccess"/>
		
		<!-- <security:access-denied-handler error-page="/accessError"/> -->
		<security:access-denied-handler ref="customAccessDenied"/>
		
		<security:logout logout-url="/logout" success-handler-ref="customLogoutSuccess" invalidate-session="true"/>
		
		
	</security:http>

	<!-- AuthenticationManager 빈 생성 -->
	<security:authentication-manager>
		<!-- UserDetailsService 사용한 인증과 권한처리 -->
		<security:authentication-provider>
		<!-- InMemory 방식 
			<security:user-service>
				<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/>
				<security:user name="admin" password="{noop}admin" authorities="ROLE_MEMBER, ROLE_ADMIN"/>
			</security:user-service> 
		-->
			
			<!-- JDBC 사용 -->
			<security:jdbc-user-service data-source-ref="dataSource"
				users-by-username-query=
				"SELECT u_id username, u_pw password, enabled FROM t_user WHERE u_id = ?"
				authorities-by-username-query=
				"SELECT u_id username, au_auth authority FROM t_auth WHERE u_id = ?"
			/>
			
			<!-- PasswordEncoder 설정 -->
			 
			<!--<security:password-encoder ref="customPasswordEncoder"/> -->
			 <security:password-encoder ref="bcryptPasswordEncoder"/>
		</security:authentication-provider>
		
	</security:authentication-manager>
	

	
	

</beans>
























